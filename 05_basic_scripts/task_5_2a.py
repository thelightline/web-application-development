# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ip = input()
ipNetwork = ip[:ip.find('/')].split('.')
ipMask = ip[ip.find('/'):]
ipBin = "{0:08b}{1:08b}{2:08b}{3:08b}".format(
    int(ipNetwork[0]), int(ipNetwork[1]), int(ipNetwork[2]), int(ipNetwork[3]))[:int(ipMask[1:])]+"0"*(32-int(ipMask[1:]))
ipBin = (ipBin[:8]+' '+ipBin[8:16]+' ' +
         ipBin[16:24]+' '+ipBin[24:]).split()

network = '''{0:<10}{1:<10}{2:<10}{3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}'''.format(int(ipBin[0], 2), int(ipBin[1], 2), int(ipBin[2], 2), int(ipBin[3], 2))
maskBin = '1' * int(ipMask[1:])+'0' * (32-int(ipMask[1:]))
maskBin = (maskBin[:8]+' '+maskBin[8:16]+' ' +
           maskBin[16:24]+' '+maskBin[24:]).split()

mask = '''{0:<10}{1:<10}{2:<10}{3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}'''.format(int(maskBin[0], 2), int(maskBin[1], 2), int(maskBin[2], 2), int(maskBin[3], 2))

out = f"Network:\n{network}\nMask:\n{ipMask}\n{mask}"
print(out)
